Temporal 101 with Python

Chapter 3: Developing a Workflow

Writing a Workflow Definition
There are three steps for turning a Python function into a Workflow Definition:
    1) Import the workflow module from the SDK
    2) Add the @workflow.defn decorator to the class that will define the Workflow Definition
    3) Add the @workflow.run decorator to the function that defines the Workflow Function

Input Parameters and Return Values
    1) Values Must Be Serializable
    2) Data Confidentiality
    3) Avoid Passing Large Amounts of Data

Initializing the Worker
    1) A Temporal Client, which is used to communicate with the Temporal Cluster
    2) The name of a Task Queue, which is maintained by the Temporal Server and polled by the Worker
    3) The Workflow Definition class, used to register the Workflow implementation with the Worker

Worker Initialization Code

greeting.py 

import asyncio
from temporalio.client import Client
from temporalio.worker import Worker
from greeting import GreetSomeone
async def main():
    client = await Client.connect("localhost:7233", namespace="default")
    # Run the worker
    worker = Worker(client, task_queue="greeting-tasks", workflows=[GreetSomeone])
    await worker.run()
if __name__ == "__main__":
    asyncio.run(main())

Run
python3 greeting.py 

