Task 6: Explore the Temporal Web UI

The Temporal Web UI is a graphical user interface that provides a convenient way to 
visualize and interact with workflows, manage task queues, and troubleshoot issues. 
It is especially useful for developers and operators who need to monitor, query, 
and replay workflows without relying entirely on the command-line interface.

Accessing Temporal Web UI
If running in docker
http://localhost:8080
If running locally
http://localhost:8233

Things we can do in Temporal UI
1) Workflow List and Filtering
2) Workflow Details
3) Workflow History and State
4) Searching and Querying
5) Monitoring Task Queues
6) Workflow Termination and Cancellation

The main Workflows page displays a table of recent Workflow Executions. The Web UI displays a maximum of 1,000 Workflow Executions.
Users can list Workflow Executions by any of the following:
    Status
    Workflow ID
    Workflow Type
    Start time
    End time
    A List Filter

For start time and end time, users can set their preferred date and time format as one of the following:
    UTC
    Local
    Relative

Select a Workflow Execution to view the Workflow Execution's History, Workers, and pending Activities.

History
This is a view of the Events and Event fields within the Workflow Execution. Approximately 40 different Events can appear in a Workflow Execution's Event History.
The top of the page lists the following execution metadata:
    Workflow Type
    Run ID
    Start Time and Close Time
    Task Queue
    Parent and Parent ID
    State Transitions

The Input and Results section displays the function arguments and return values for debugging purposes. Results are not available until the Workflow finishes.
The Recent Events tab has the following views:
    Timeline: A chronological or reverse-chronological order of events with a summary. Clicking into an Event displays all details for that Event. Clicking “Expand all” displays all Event details. Similarly, clicking “Collapse all” collapses the table and displays only the summary.
    Compact: A logical grouping of Activities, Signals and Timers.
    JSON: The full JSON code for the workflow.

Download Event History
The entire Workflow Execution Event History, in JSON format, can be downloaded from this section.

Terminate Workflow
Workflow Executions can be Terminated directly from the UI. A custom note can be logged from the UI when that happens.

Workers
Displays the Workers currently polling on the Workflow Task Queue with a count. If no Workers are polling, an error displays.

Pending Activities
Displays a summary of recently active and/or pending Activity Executions. Clicking a pending Activity directs the user to the Pending Activities tab to view details.

Call Stack
The screen shows the captured result from the __stack_trace Query. The Query is performed when the tab is selected. It works only if a Worker is running and available to return the call stack. The call stack shows each location where Workflow code is waiting.

Queries
Lists all Queries sent to the Workflow Execution.

Schedules
On Temporal Cloud and self-hosted Temporal Service Web UI, the Schedules page lists all the Schedules created on the selected Namespace.
Click a Schedule to see details, such as configured frequency, start and end times, and recent and upcoming runs.

Settings
On Temporal Cloud, Settings is visible only to Account Owner and Global Admin roles.
Click Settings to see and manage the list of users in your account and to set up integrations such as Observability and Audit logging.
On a self-hosted Temporal Service, manage your users, metrics, and logging in your server configuration.

Archive
On a self-hosted Temporal Service, Archive shows Archived data of your Workflow Executions on the Namespace.
To see data in your self-hosted Temporal Service, you must have Archival set up and configured.
For information and details on the Archive feature in Temporal Cloud, contact your Temporal representative.

Codec Server
The Web UI can use a Codec Server with a custom Data Converter to decode inputs and return values. For details, see Securing your data.
The UI supports a Codec Server endpoint. For details on setting the Codec Server endpoint, see Codec Server setup.














1. Introduction to Temporal Web UI

The Temporal Web UI is a graphical user interface that provides a convenient way to visualize and interact with workflows, manage task queues, and troubleshoot issues. It is especially useful for developers and operators who need to monitor, query, and replay workflows without relying entirely on the command-line interface.

The Web UI is a valuable tool for observing workflows in real time, understanding their state, and tracking their execution history. It can be used for debugging workflows, inspecting tasks, and reviewing performance metrics.
2. Accessing Temporal Web UI

Once you have Temporal running locally or on a server, the Web UI can be accessed through a browser. By default, if Temporal is running in Docker, you can open the Web UI by navigating to:

http://localhost:8080

This will bring up the Temporal Web UI, which allows you to interact with the Temporal service visually. Ensure that your Temporal server and all required services are running before accessing the Web UI.
3. Main Features of Temporal Web UI

The Temporal Web UI provides several key features that can help you manage and monitor your Temporal workflows and activities:
3.1. Workflow List and Filtering

    The Workflows List page provides a list of active workflows and their statuses.
    You can filter workflows by workflow ID, status (e.g., running, completed, or failed), and task queue.
    This page helps you quickly find workflows you want to inspect, allowing you to sort and filter based on specific criteria.

3.2. Workflow Details

    When you click on a workflow from the list, you can view its detailed information.
    Workflow History: View the history of all events that have occurred during the workflow’s execution (e.g., start, activity execution, signal events).
    Workflow Execution Status: Displays the current state of the workflow, including whether it is in progress, completed, or failed.
    Signals: View and send signals to running workflows. Signals allow you to send external updates or trigger specific actions within workflows.

3.3. Workflow History and State

    The Workflow History page shows the complete history of a specific workflow, including all events and state transitions.
    Events such as workflow starts, activity completions, and retries are logged here.
    This is especially useful for debugging workflows by examining how the state has changed throughout the execution.

3.4. Searching and Querying

    The Web UI allows you to search for workflows and filter by parameters such as task queue name, workflow ID, or the type of workflow.
    You can search by specific attributes, which is useful when dealing with large numbers of workflows and when you need to locate a particular workflow quickly.

3.5. Monitoring Task Queues

    You can view and monitor the status of task queues. Task queues hold the tasks (activities and workflows) that are waiting to be processed by workers.
    The Web UI displays details about each task queue, including the number of pending tasks and other metrics.

3.6. Replay Workflows

    Replay Workflow: One of the most powerful features of the Temporal Web UI is the ability to replay a workflow's history. This allows you to debug a workflow by replaying its execution from a specific point in time.
    You can view how the workflow state and history evolve as each event is replayed.

3.7. Workflow Termination and Cancellation

    From the Web UI, you can also terminate workflows that are no longer needed. This is helpful when dealing with long-running or stuck workflows.
    The Web UI gives you the ability to stop a workflow without affecting other workflows running in the same namespace.

4. Monitoring and Troubleshooting with the Web UI

The Web UI makes it easy to monitor workflow execution and troubleshoot issues. You can:

    Inspect Workflow Failures: If a workflow has failed, you can view the workflow history to understand what went wrong. For instance, you might see which activity caused the failure, what parameters were passed, and the type of error that occurred.

    Replay Workflows: If an issue occurs and you want to debug it, you can replay the workflow from any point in its history. This allows you to simulate the workflow's behavior without affecting the actual production system.

    Visualize Task Queues: Monitor how tasks are being processed by the workers. If you see that tasks are backing up in a queue, you can investigate potential issues such as insufficient workers or worker failures.

    Track Worker Status: You can monitor the performance of Temporal workers from the Web UI, including how many tasks they have processed and whether any workers are failing.

5. Temporal Web UI Navigation Overview

The Web UI is designed to be intuitive and easy to navigate. Below is an overview of its sections:

    Dashboard: The first page you see when you log in. It provides an overview of active workflows and task queues.
    Workflows: A section where you can list, filter, and inspect workflows.
    History: View detailed workflow histories, including all events and state transitions.
    Task Queues: Monitor task queues, including the number of tasks waiting to be processed.
    Settings and Preferences: Configure Web UI settings, including theme (dark/light mode), user preferences, and more.

6. Example Workflow Inspection

Let’s walk through an example of inspecting a workflow using the Temporal Web UI:

    Access the Web UI:
        Open your browser and go to http://localhost:8088 (or the relevant URL if running in a different environment).

    View Workflow List:
        On the Workflows page, you can see a list of all running workflows. You can filter by task queue, workflow ID, or status.

    Inspect Workflow History:
        Click on a specific workflow to view its details. In the History section, you will see a list of all events associated with that workflow (e.g., start, activity executed, signals received, etc.).

    Replay Workflow:
        If the workflow is in an error state, you can use the Replay option to replay the workflow’s history and debug the issues step by step.

7. Conclusion

The Temporal Web UI provides a powerful and user-friendly interface for interacting with the Temporal system. It allows you to visualize workflows, monitor task queues, track workflow execution, replay workflows, and troubleshoot issues in real time.

By using the Web UI in combination with the temporal CLI tool, you can easily manage workflows, debug them effectively, and ensure that your Temporal-based applications run smoothly.